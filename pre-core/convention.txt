

# Eslint , prettier, soft delete, status code

# Postman vs swagger
# npm vs npx
- npm (Node Package Manager) is primarily used for managing packages in your Node.js projects. You use it to install, update, or remove packages. It installs packages from the npm registry and saves them in your project's node_modules directory.
- npx is a tool that comes with npm (version 5.2.0 and later) and allows you to execute Node packages directly without needing to install them globally. It’s especially useful for running CLI tools that you may not want to install globally on your machine.

# Common packages: nodemon, Eslint, prettier, env, ORM - mongoose or sequiliuze
# npm —save
# package.json vs package.lock.json
# dev dependency


# table- snake case
# model- pascal case
# in sequilize (reverse naming convention )

# Git branches:

- feature
- fix
- docs
- hotfix - immediate fix
- release
- chore - for comments
- Prod branch, release 
- migration name: create-table-users
- seed in sequilize 
- functions name -  camel case
- file name - kebab case
- http-status-code package
- nvm install --lts
- nvm use --lts
- nvm list

# Node project setup:

1. node(LTS)
2. npm init(LTS)
3. express
4. git init
5. .gitignore
6. .env
7. .env.sample - add new variable which we use in env
8. Litnter(ESLint) and formatter(Prettier) - .prettierrc and .eslint.config.js in root folder 
* Initial commit 



9. Folder setup
10. src and tests
* Inside src:
- index.js
- routes - resources.route.js(eg: users.route.js) , index.js ….only include middleware, flow : 1. validators, 2. controllers,  no services
- controller - always include try and catch -  resouces.controller.js 
- services - business logic - in unit test write try catch else ignore — resouces.service.js - function name: (eg: create)
- helpers - functions and utility functions — resources.helper.js, common.helper.js
- config - redis(eg: redis.js), mongo connection (eg: database.js)
- models - 
- middlewares - auth.middleware.js
- serializers - users.serializers.js - standard conventions where we return response (called in services, services returns serializeed data)
- validators - same standard
- utils: aws.js, jwt.js - (third party services)
- swagger(optional) - swagger.yaml

* Inside tests folder:
- test file 


* Commit : Folder structure….. inside every folder make .gitkeep file and push the commit 





- EsLint and Prettier : https://nafeu.medium.com/automatic-code-linting-formatting-with-eslint-and-prettier-in-sublime-text-3-75c507cf9a0d
- https://eslint.org/docs/latest/use/getting-started
 
- docker-compose run app npx sequelize-cli db:migrate --config src/config/config.json


// module.exports = {
//   development: {
//     username: 'pgsql',
//     password: '12345678',
//     database: 'template1',
//     host: '127.0.0.1',
//     dialect: 'postgres'
//   }
// };



# Thursday
- Name change sequelize
- Promise.reject
- Promise.All()
- Paranoid: true sequelize
- __prototype js	
- Git hooks


- psql --username pgsql

- docker exec -it postgres psql -U pgsql -d
- docker exec -it <container_name_or_id> psql -U <username> -d <database_name>




- SELECT column_name, data_type 
  FROM information_schema.columns 
  WHERE table_name = '<table_name>';

- Run specific. Migration: npx sequelize-cli db:migrate --name

- CRUD migrations.
- https://dev.to/adefam/create-update-add-and-delete-sequelize-migration-eoa




- Seed:
- npx sequelize-cli seed:generate --name demo-user



- Create first model: npx sequelize-cli model:generate --name User --attributes firstName:string,lastName:string,email:string
- Edit migration file 

- Run migration: npx sequelize-cli db:migrate --config src/config/database.js

- Undo last migration: npx sequelize-cli db:migrate:undo --config src/config/database.js



- To see specific table in docker postgres: - SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '<table_name>';


- many to many relations in sql queries with example, use case with respect to postgres in simple lang.
- lazy loading and eager


# Associations:
1. One-to-One Association
-  User.hasOne(Profile);
-  Profile.belongsTo(User);

- Student.belongsToMany(Course, { through: 'Enrollments' });
- Course.belongsToMany(Student, { through: 'Enrollments' });



- In the context of SQL databases, paranoids refers to a specific design pattern used to manage soft deletions. This pattern involves keeping records in the database even after they are "deleted," typically by marking them with a flag instead of removing them entirely. - This allows for data recovery and auditing.

- Soft Deletion: Instead of deleting a record, you mark it as deleted using a boolean column (e.g., is_deleted or deleted_at).
- Data Recovery: Since the data is not actually removed, it can be restored if needed.


# Example
- Let's say you have a Users table. Here’s how it might look:

- Users Table
 id	username	email	is_deleted	deleted_at
 1	alice	alice@example.com	false	NULL
 2	bob	bob@example.com	true	2024-01-10 10:00:00
 3	charlie	charlie@example.com	false	NULL

Implementation
1. Creating the Table with Soft Delete Columns

- CREATE TABLE Users ( id SERIAL PRIMARY KEY, username VARCHAR(50), email VARCHAR(100), is_deleted BOOLEAN DEFAULT FALSE, deleted_at TIMESTAMP NULL );

2. Inserting Data

- INSERT INTO Users (username, email) VALUES ('alice', 'alice@example.com');
- INSERT INTO Users (username, email) VALUES ('bob', 'bob@example.com');


3. Marking a User as Deleted
- Instead of deleting a user, you update the is_deleted flag:

- UPDATE Users
  SET is_deleted = true, deleted_at = NOW() 
  WHERE id = 2;  -- Mark Bob as deleted;


4. Querying Active Users
-  SELECT * FROM Users
- WHERE is_deleted = false;






