
Docker and Postgres


* docker exec -it <> bash - to enter terminal inside viertual machine not macos terminal
* Tables name :plural 

* enter a container : docker exec -it postgres bash
* list running container : docker ps
* exit the container : exit

Docker Postgres setup and restore DUMP DB.

Step 1: Ensure Docker and Docker Compose Are Installed
Before proceeding, make sure you have Docker and Docker Compose installed on your machine. You can check if they are installed by running:

docker --version
docker-compose --version
If they are not installed, you can follow the instructions on the Docker website to install them.

Step 2: Prepare Your Directory Structure
You already have a docker-compose.yaml file. Ensure that your directory structure looks something like this:

/services
  ├── /data          (for PostgreSQL data)
  ├── /dumps         (for SQL dumps)
  └── docker-compose.yaml

Step 3: Move the SQL File to the Appropriate Directory
1. Move your chinook.sql file from the downloads folder into the dumps directory inside your services folder.

Step 4: Start the PostgreSQL Container
1. Open a terminal and navigate to the directory containing your docker-compose.yaml file: cd path/to/services
2. Start the PostgreSQL container using Docker Compose:docker-compose up -d
    * up tells Docker Compose to start your services defined in the YAML file.
    * -d runs the services in detached mode (in the background).

Step 5: Wait for PostgreSQL to Start
Give it a few moments for PostgreSQL to start up fully. You can check the logs to confirm it’s running properly:

docker-compose logs -f

Look for messages indicating that PostgreSQL is ready to accept connections.

Step 6: Access the PostgreSQL Container
Now, you'll need to access the PostgreSQL container to restore your database. You can do this by executing a command inside the running container.
1. Use the following command to get a shell inside the PostgreSQL container:docker exec -it postgres bash

Step 7: Restore the Database
Create the Database: Once you are in the PostgreSQL shell, create a new database for your chinook.sql file:

CREATE DATABASE chinook;

Exit the PostgreSQL Shell: Type \q and press Enter to exit the PostgreSQL shell.

Restore the Database: Now, you can restore your database using the following command:
1. Once inside the container, you can use the psql command-line utility to restore your database. First, ensure that the chinook.sql file is in the /dumps directory by navigating there:cd /dumps
2. Now, use the psql command to restore the database: psql -U pgsql -d postgres -f chinook.sql
    * -U pgsql: This specifies the PostgreSQL user you set in your docker-compose.yaml.
    * -d postgres: This specifies the database to connect to. You can change this to a specific database name if you want to create a new database.
    * -f chinook.sql: This specifies the file you want to run, which contains the SQL commands to create and populate your database.
Step 8: Exit the Container
After the restore is complete, you can exit the container shell:

exit




Step 5: Verify the Restoration
Access PostgreSQL Again: Use the command to access the PostgreSQL shell again:

docker exec -it postgres psql -U pgsql -d chinook

List Tables: You can list the tables to verify that the data has been restored:

\dt


Additional Notes
Stop the Container: When you're done, you can stop the PostgreSQL container with:

docker-compose down
Data Persistence: Since you're using a volume (./data), your database will persist even if you stop the container.





Docker behind the scene!

Let’s break down how PostgreSQL runs in a Docker container and how this setup works behind the scenes, allowing you to run it without a traditional installation.
1. What is Docker?
Docker is a platform that allows you to automate the deployment of applications in lightweight, portable containers. Containers package an application and all its dependencies into a single unit that can run consistently across different environments.
2. What are Containers?
Containers are isolated environments that share the host operating system's kernel. Unlike virtual machines, which require a full operating system to run, containers are more lightweight and start up quickly because they don’t have the overhead of a complete OS.
3. How Does Docker Run PostgreSQL?
A. Docker Image
* Definition: A Docker image is a read-only template that contains the application code, libraries, and environment settings needed to run an application.
* PostgreSQL Image: When you use image: postgres in your docker-compose.yaml, you’re specifying a pre-built Docker image of PostgreSQL from Docker Hub (the official repository for Docker images).
* Layers: Docker images are built in layers, which means that common components are shared between images, making them more efficient in terms of storage.
B. Container Creation
* Starting the Container: When you run docker-compose up, Docker creates a container from the PostgreSQL image. This container is an instance of the image, with its own filesystem and processes.
* Isolation: The container runs in its own isolated environment. Any changes made (like data written to the database) occur only within that container and do not affect the host machine or other containers.
C. Environment Variables
* Configuration: In your docker-compose.yaml, you define environment variables (like POSTGRES_USER and POSTGRES_PASSWORD). Docker passes these variables to the container at runtime, allowing you to configure PostgreSQL without modifying the image.
D. Volumes for Data Persistence
* Data Volumes: The line - './data:/var/lib/postgresql/data' in your setup mounts a host directory (./data) to a directory inside the container (/var/lib/postgresql/data). This allows PostgreSQL to store its data persistently even after the container is stopped or removed.
* Persistent Storage: Without volumes, data would be lost when the container is removed. Volumes provide a way to persist data outside of the container’s lifecycle.
E. Networking
* Ports: The line - "5432:5432" maps the container's port (5432) to the host's port (also 5432). This allows you to access the PostgreSQL service from your host machine using standard PostgreSQL clients or applications.
* Container Networking: Docker provides internal networking, enabling communication between multiple containers, such as a web application container communicating with the PostgreSQL container.
 Behind the Scenes Steps
1. Pulling the Image: When you first run your setup, Docker pulls the PostgreSQL image from Docker Hub if it’s not already available locally.
2. Creating the Container: Docker creates a container from the image, initializing it with the provided configuration (environment variables, ports, volumes).
3. Starting PostgreSQL: The PostgreSQL server starts within the container. It uses the specified environment variables for its configuration.
4. Data Handling: Any data created by PostgreSQL is stored in the mounted volume on the host, ensuring persistence.
5. Networking: Docker sets up the networking, allowing your host machine and other containers to communicate with the PostgreSQL service as needed.

Conclusion
Using Docker to run PostgreSQL simplifies the setup, management, and deployment processes. You get a fully functional PostgreSQL environment without needing to install it directly on your host machine. Docker handles the complexities of isolation, configuration, and persistence, making it an ideal choice for development, testing, and even production environments.





* Restoring :
  psql -U username -d dbname filename.sql

-- For Postgres versions 9.0 or earlier --
   psql -U username -d dbname -1 -f filename.sql
   or 
   pg_restore -U username -d dbname -1 filename.dump